"use strict"

Cylon = require("cylon")
noble = require("noble")

FIRMWARE = "d5060201a904deb947482c7f4a124842"

Driver = module.exports = Driver = ->
  Driver.__super__.constructor.apply this, arguments
  @serviceId = "d5060001a904deb947482c7f4a124842"
  @commands = getFirmwareVersion: @getFirmwareVersion
  return

Cylon.Utils.subclass Driver, Cylon.Driver

###*
Starts the driver

@param {Function} callback to be triggered when started
@return {null}
###
Driver::start = (callback) ->
  callback()
  return


###*
Stops the driver

@param {Function} callback to be triggered when halted
@return {null}
###
Driver::halt = (callback) ->
  callback()
  return

Driver::getFirmwareVersion = (callback) ->
  @_getServiceCharacteristic FIRMWARE, (err, data) ->
    version = []
    if data isnt null
    	version.push( data.readUInt8(0))
    	version.push( data.readUInt8(2))
    	version.push( data.readUInt8(4))
    	version.push( data.readUInt8(6))

    callback err, version
    return


Driver::_writeServiceCharacteristic = (value, char, callback) ->
  @connection.writeServiceCharacteristic @serviceId, char, new Buffer([value]), (err) ->
    callback err  if "function" is typeof callback
    return

  return

Driver::_getServiceCharacteristic = (char, callback) ->
  @connection.readServiceCharacteristic @serviceId, char, (err, data) ->
    callback err, data  if "function" is typeof callback
    return

  return